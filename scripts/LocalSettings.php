<?php
# This file was automatically generated by the MediaWiki 1.20.2
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename      = "catbox";
$wgMetaNamespace = "Catbox";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath       = "/wiki";
$wgScriptExtension  = ".php";

## The protocol and server name to use in fully-qualified URLs
$wgServer           = "http://localhost";

## The relative URL path to the skins directory
$wgStylePath        = "$wgScriptPath/skins";

## The relative URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo             = "$wgStylePath/common/images/wiki.png";

## UPO means: this is also a user preference option

$wgEnableEmail      = false;
$wgEnableUserEmail  = true; # UPO

$wgEmergencyContact = "apache@localhost";
$wgPasswordSender   = "apache@localhost";

$wgEnotifUserTalk      = false; # UPO
$wgEnotifWatchlist     = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype           = "mysql";
$wgDBserver         = "localhost";
$wgDBname           = "my_wiki";
$wgDBuser           = "root";
$wgDBpassword       = "root";

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=utf8";

# Experimental charset support for MySQL 5.0.
$wgDBmysql5 = false;

## Shared memory settings
$wgMainCacheType    = CACHE_NONE;
$wgMemCachedServers = array();

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads  = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from http://commons.wikimedia.org
$wgUseInstantCommons  = false;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
#$wgHashedUploadDirectory = false;

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of the list in ./languages/Names.php
$wgLanguageCode = "en";

$wgSecretKey = "a25da9502fa6d29c6b85d4f0edeee66c2fe2d44338ab7fed6b1ad1334a8187fa";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "f7278a8741a03082";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook', 'vector':
$wgDefaultSkin = "vector";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl  = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# Query string length limit for ResourceLoader. You should only set this if
# your web server has a query string length limit (then set it to that limit),
# or if you have suhosin.get.max_value_length set in php.ini (then set it to
# that value)
$wgResourceLoaderMaxQueryLength = -1;

# End of automatically generated settings.
# Add more configuration options below.

$wgGenerateThumbnailOnParse = true;
$wgFileExtensions = array('png','gif','jpg','jpeg','svg','psd','ai','doc','xls','mpp','pdf','ppt','tiff','bmp','docx', 'xlsx', 'pptx','ps','odt','ods','odp','odg','txt');

require_once( "$IP/extensions/SwiftCloudFiles/SwiftCloudFiles.php" );

$wgSwiftConf = array(
     'authUrl' => 'http://192.168.1.101:5000/v2.0',  //This the the url for your authentication server. For Rackspace Cloud Files, this would be auth.api.rackspacecloud.com
     'user' => 'demo:99ba9a1c868243e39800c6214bbcc185',              //Some swift authentications require a username to be used with the account or tenant id, ie 'username:tenant'
     'key' => 'password' );               //The API Key for used for authentication

$wgFileBackends[]  =  array(
        'name'                => 'localSwift',
        'class'               => 'SwiftFileBackend',
        'wikiId'              => 'catbox',
        'lockManager'         => 'nullLockManager',
        'swiftAuthUrl'        => $wgSwiftConf['authUrl'],
        'swiftUser'           => $wgSwiftConf['user'],
        'swiftKey'            => $wgSwiftConf['key'],
        'swiftUseCDN'         => false,
        #'readOnly'          =>  'Temporary planned maintenence for 5 min',
       'parallelize'         => 'implicit'
);
$wgLocalFileRepo  =  array(
        'class'              => 'LocalRepo',
        'name'               => 'local',
        'backend'            => 'localSwift',
        'scriptDirUrl'       => $wgScriptPath,
        'scriptExtension'    => $wgScriptExtension,
        'url'                => 'http://192.168.1.101:8080/v1/AUTH_99ba9a1c868243e39800c6214bbcc185',                         //An example would be 'http://cdn.cdnprovider.com'
        'hashLevels'         => 0,
        'deletedHashLevels'  => 0,
        'zones'             =>  array(      //Change container and url values to match your Swift provider configuration settings
                'public'  =>  array( 'container' =>  'public', 'url' =>  'http://192.168.1.101:8080/v1/AUTH_99ba9a1c868243e39800c6214bbcc185/catbox-public' ),
                'thumb'   =>  array( 'container' =>  'thumb',  'url' =>  'http://192.168.1.101:8080/v1/AUTH_99ba9a1c868243e39800c6214bbcc185/catbox-thumb' ),
                'temp'    =>  array( 'container' =>  'temp', 'url' =>  'http://192.168.1.101:8080/v1/AUTH_99ba9a1c868243e39800c6214bbcc185/catbox-temp' ),
                'deleted' =>  array( 'container' =>  'deleted' ), // deleted items don't have a URL
        )
);
$wgDebugLogGroups['SwiftBackend'] = "/var/log/mediawiki-SwiftBackend.log";
$wgDebugLogFile = "/var/log/mediawiki.log";

